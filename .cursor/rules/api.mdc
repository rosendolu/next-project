---
description: 
globs: 
alwaysApply: false
---
# api implementation

- Refer the following implementation of the api hooks
```
import { request } from '@gatec/cs-shared';
import {isNil} from 'lodash'
import { useMutation, UseMutationResult, useQuery, UseQueryResult } from '@tanstack/react-query';
import {
    IChatLogQueryParams,
    IChatLogResponse,
    ISopCategory,
    ISopCategoryParams,
    ISopDocument,
    ISopDocumentListParams,
    ISopDocumentListResponse,
    ISopSaveCategoryParams,
    ISopSaveDocumentParams,
} from './types';

export const useGetDetailList = (params: IChatLogQueryParams){
    return useQuery<IChatLogResponse>({
        queryKey: ['chat-log-chat-list', params],
        refetchOnWindowFocus: false,
        queryFn: () =>
            request({
                url: '/cs/service/get_im_service_chat_list',
                method: 'POST',
                data: params,
            }),
        enabled: !isNil(params),
        staleTime: 6e5,
    });
};
export const useDeleteSopCategory = () => {
    return useMutation({
        mutationFn: (id: string) =>
            request({
                url: '/cs/service/del_sop_category',
                method: 'POST',
                data: { id },
            }).then(res => res.datas),
    });
};
```
- request params and query hook must be type safed but don't add response type to api hooks such ad `: UseQueryResult<ISopDocument> ` which is redundant
- If there is no successful response example code use an empty interface as the request response type
- only add successful response type `T` at `useQuery<T>`,don't add type at any other generic type. `T` is the type definition of `datas`(not include `resMsg`)
- request url path must the same with the doc
- Add a full annotation to the type file by following the annotation in the api document
